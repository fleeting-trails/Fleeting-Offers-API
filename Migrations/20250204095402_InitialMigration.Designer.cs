// <auto-generated />
using System;
using FleetingOffers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FleetingOffers.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250204095402_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseAdditionalImageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseEntityId");

                    b.HasIndex("ImageId");

                    b.ToTable("AdvertiseAdditionalImageEntity");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseAnalyticsEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Clicks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Conversions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseId")
                        .IsUnique();

                    b.ToTable("AdvertiseAnalytics");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseCategoryEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("AdvertiseCategories");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseDealTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AdvertiseDealTypes");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DealTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("DealTypeId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Advertises");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseIndustryEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("AdvertiseIndustries");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseLocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseEntityId");

                    b.HasIndex("LocationId");

                    b.ToTable("AdvertiseLocations");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseOwnerEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseId");

                    b.HasIndex("UserId");

                    b.ToTable("AdvertiseOwners");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseRelatedAdvertiseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedAdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RelatedAdvertiseId");

                    b.ToTable("AdvertiseRelatedAdvertises");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseTagEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseEntityId");

                    b.ToTable("AdvertiseTags");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.AuthOtpEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtpValue")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuthOtps");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.AuthTokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceSignature")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.PasswordEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.UserPermissionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionString")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubRoleId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Campaign.CampaignAdvertiseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CampaignEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseId");

                    b.HasIndex("CampaignEntityId");

                    b.ToTable("CampaignAdvertises");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Campaign.CampaignEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("FleetingOffers.Modules.File.FileEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Storage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Location.LocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Long")
                        .HasColumnType("REAL");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Union")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Upazila")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Village")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberAuthProviderEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Provider")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubscriberAuthProviders");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AuthProviderUsed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProvideInfoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PasswordId");

                    b.HasIndex("ProvideInfoId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberFavouriteAdvertiseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdvertiseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiseId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberFavouriteAdvertises");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberInitialPreferenceCategoryEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberEntityId");

                    b.ToTable("SubscriberInitialPreferenceCategories");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberInitialPreferenceIndustryEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("IndustryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberEntityId");

                    b.ToTable("SubscriberInitialPreferenceIndustries");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileEmailEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProfileEntityId");

                    b.ToTable("OrganizationProfileEmails");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("OrganizationProfiles");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileExtraImageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("OrganizationProfileEntityId");

                    b.ToTable("OrganizationProfileExtraImages");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfilePhoneEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProfileEntityId");

                    b.ToTable("OrganizationProfilePhones");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationSocialMediaEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationProfileEntityId");

                    b.ToTable("OrganizationSocialMedias");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPasswordSet")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RestrictedUserSubRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserSubRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OtpId");

                    b.HasIndex("PasswordId");

                    b.HasIndex("UserSubRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.UserSubRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserSubRoles");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseAdditionalImageEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", null)
                        .WithMany("AdditionalImages")
                        .HasForeignKey("AdvertiseEntityId");

                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseAnalyticsEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", "Advertise")
                        .WithOne("Analytics")
                        .HasForeignKey("FleetingOffers.Modules.Advertise.AdvertiseAnalyticsEntity", "AdvertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertise");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseCategoryEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseCategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId");

                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseDealTypeEntity", "DealType")
                        .WithMany()
                        .HasForeignKey("DealTypeId");

                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseIndustryEntity", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");

                    b.Navigation("Category");

                    b.Navigation("CoverImage");

                    b.Navigation("DealType");

                    b.Navigation("SubCategory");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseIndustryEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseLocationEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", null)
                        .WithMany("Locations")
                        .HasForeignKey("AdvertiseEntityId");

                    b.HasOne("FleetingOffers.Modules.Location.LocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseOwnerEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", "Advertise")
                        .WithMany("Owners")
                        .HasForeignKey("AdvertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetingOffers.Modules.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseRelatedAdvertiseEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", "RelatedAdvertise")
                        .WithMany("RelatedAdvertises")
                        .HasForeignKey("RelatedAdvertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedAdvertise");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseTagEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", null)
                        .WithMany("Tags")
                        .HasForeignKey("AdvertiseEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.AuthTokenEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.User.UserEntity", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Auth.UserPermissionEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.User.UserSubRoleEntity", "SubRole")
                        .WithMany("Permissions")
                        .HasForeignKey("SubRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubRole");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Campaign.CampaignAdvertiseEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", "Advertise")
                        .WithMany()
                        .HasForeignKey("AdvertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetingOffers.Modules.Campaign.CampaignEntity", null)
                        .WithMany("CampaignAdvertises")
                        .HasForeignKey("CampaignEntityId");

                    b.Navigation("Advertise");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Campaign.CampaignEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId");

                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");

                    b.Navigation("CoverImage");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Auth.PasswordEntity", "Password")
                        .WithMany()
                        .HasForeignKey("PasswordId");

                    b.HasOne("FleetingOffers.Modules.Subscriber.SubscriberAuthProviderEntity", "ProvideInfo")
                        .WithMany()
                        .HasForeignKey("ProvideInfoId");

                    b.Navigation("Password");

                    b.Navigation("ProvideInfo");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberFavouriteAdvertiseEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Advertise.AdvertiseEntity", "Advertise")
                        .WithMany()
                        .HasForeignKey("AdvertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetingOffers.Modules.Subscriber.SubscriberEntity", "Subscriber")
                        .WithMany("FavouriteAdvertises")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertise");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberInitialPreferenceCategoryEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Subscriber.SubscriberEntity", null)
                        .WithMany("InitialPreferenceCategories")
                        .HasForeignKey("SubscriberEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberInitialPreferenceIndustryEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Subscriber.SubscriberEntity", null)
                        .WithMany("InitialPreferenceIndustries")
                        .HasForeignKey("SubscriberEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileEmailEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.User.OrganizationProfileEntity", null)
                        .WithMany("ContactEmails")
                        .HasForeignKey("OrganizationProfileEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId");

                    b.HasOne("FleetingOffers.Modules.Location.LocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId");

                    b.Navigation("CoverImage");

                    b.Navigation("Location");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileExtraImageEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.File.FileEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetingOffers.Modules.User.OrganizationProfileEntity", null)
                        .WithMany("ExtraImages")
                        .HasForeignKey("OrganizationProfileEntityId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfilePhoneEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.User.OrganizationProfileEntity", null)
                        .WithMany("Phones")
                        .HasForeignKey("OrganizationProfileEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationSocialMediaEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.User.OrganizationProfileEntity", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("OrganizationProfileEntityId");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.UserEntity", b =>
                {
                    b.HasOne("FleetingOffers.Modules.Auth.AuthOtpEntity", "Otp")
                        .WithMany()
                        .HasForeignKey("OtpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetingOffers.Modules.Auth.PasswordEntity", "Password")
                        .WithMany()
                        .HasForeignKey("PasswordId");

                    b.HasOne("FleetingOffers.Modules.User.UserSubRoleEntity", "UserSubRole")
                        .WithMany()
                        .HasForeignKey("UserSubRoleId");

                    b.Navigation("Otp");

                    b.Navigation("Password");

                    b.Navigation("UserSubRole");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Advertise.AdvertiseEntity", b =>
                {
                    b.Navigation("AdditionalImages");

                    b.Navigation("Analytics");

                    b.Navigation("Locations");

                    b.Navigation("Owners");

                    b.Navigation("RelatedAdvertises");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Campaign.CampaignEntity", b =>
                {
                    b.Navigation("CampaignAdvertises");
                });

            modelBuilder.Entity("FleetingOffers.Modules.Subscriber.SubscriberEntity", b =>
                {
                    b.Navigation("FavouriteAdvertises");

                    b.Navigation("InitialPreferenceCategories");

                    b.Navigation("InitialPreferenceIndustries");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.OrganizationProfileEntity", b =>
                {
                    b.Navigation("ContactEmails");

                    b.Navigation("ExtraImages");

                    b.Navigation("Phones");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.UserEntity", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("FleetingOffers.Modules.User.UserSubRoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
